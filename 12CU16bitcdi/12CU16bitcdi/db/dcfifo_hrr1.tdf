--dcfifo_mixed_widths CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Cyclone II" IGNORE_CARRY_BUFFERS="OFF" LPM_NUMWORDS=1024 LPM_SHOWAHEAD="OFF" LPM_WIDTH=18 LPM_WIDTH_R=18 LPM_WIDTHU=10 LPM_WIDTHU_R=10 MAXIMIZE_SPEED=5 OVERFLOW_CHECKING="OFF" RAM_BLOCK_TYPE="M4K" RDSYNC_DELAYPIPE=5 UNDERFLOW_CHECKING="OFF" USE_EAB="ON" WRITE_ACLR_SYNCH="OFF" WRSYNC_DELAYPIPE=5 aclr data q rdclk rdreq wrclk wrreq CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Cyclone II" LOW_POWER_MODE="AUTO" lpm_hint="MAXIMIZE_SPEED=5,RAM_BLOCK_TYPE=M4K,MAXIMUM_DEPTH=512" MAXIMUM_DEPTH=512 ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
--VERSION_BEGIN 13.0 cbx_a_gray2bin 2013:06:12:18:03:43:SJ cbx_a_graycounter 2013:06:12:18:03:43:SJ cbx_altdpram 2013:06:12:18:03:43:SJ cbx_altsyncram 2013:06:12:18:03:43:SJ cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_dcfifo 2013:06:12:18:03:43:SJ cbx_fifo_common 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_lpm_compare 2013:06:12:18:03:43:SJ cbx_lpm_counter 2013:06:12:18:03:43:SJ cbx_lpm_decode 2013:06:12:18:03:43:SJ cbx_lpm_mux 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_scfifo 2013:06:12:18:03:43:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ cbx_stratixiii 2013:06:12:18:03:43:SJ cbx_stratixv 2013:06:12:18:03:43:SJ cbx_util_mgl 2013:06:12:18:03:43:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION a_graycounter_p96 (aclr, clock, cnt_en)
RETURNS ( q[10..0]);
FUNCTION a_graycounter_ggc (aclr, clock, cnt_en)
RETURNS ( q[10..0]);
FUNCTION a_graycounter_fgc (aclr, clock, cnt_en)
RETURNS ( q[10..0]);
FUNCTION altsyncram_saa1 (aclr1, address_a[9..0], address_b[9..0], addressstall_b, clock0, clock1, clocken1, data_a[17..0], wren_a)
RETURNS ( q_b[17..0]);
FUNCTION dffpipe_ngh (clock, clrn, d[0..0])
RETURNS ( q[0..0]);
FUNCTION alt_synch_pipe_sdb (clock, clrn, d[10..0])
RETURNS ( q[10..0]);
FUNCTION alt_synch_pipe_0e8 (clock, clrn, d[10..0])
RETURNS ( q[10..0]);
FUNCTION cmpr_636 (dataa[10..0], datab[10..0])
RETURNS ( aeb);

--synthesis_resources = reg 89 
OPTIONS ALTERA_INTERNAL_OPTION = "AUTO_SHIFT_REGISTER_RECOGNITION=OFF;REMOVE_DUPLICATE_REGISTERS=OFF;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;suppress_da_rule_internal=s102;{-to p0addr} POWER_UP_LEVEL=LOW;{-to rdptr_g} suppress_da_rule_internal=r105;{-to rs_dgwp_reg} suppress_da_rule_internal=r105";

SUBDESIGN dcfifo_hrr1
( 
	aclr	:	input;
	data[17..0]	:	input;
	q[17..0]	:	output;
	rdclk	:	input;
	rdreq	:	input;
	wrclk	:	input;
	wrreq	:	input;
) 
VARIABLE 
	rdptr_g1p : a_graycounter_p96;
	wrptr_g1p : a_graycounter_ggc;
	wrptr_gp : a_graycounter_fgc;
	fifo_ram : altsyncram_saa1;
	delayed_wrptr_g[10..0] : dffe;
	p0addr : dffe
		WITH (
			power_up = "low"
		);
	rdptr_g[10..0] : dffe;
	rs_dgwp_reg[10..0] : dffe;
	ws_dgrp_reg[10..0] : dffe;
	rdaclr : dffpipe_ngh;
	rs_dgwp : alt_synch_pipe_sdb;
	ws_dgrp : alt_synch_pipe_0e8;
	rdempty_eq_comp : cmpr_636;
	wrfull_eq_comp : cmpr_636;
	ram_address_a[9..0]	: WIRE;
	ram_address_b[9..0]	: WIRE;
	rdcnt_addr_ena	: WIRE;
	valid_rdreq	: WIRE;
	valid_wrreq	: WIRE;
	wrptr_gs[10..0]	: WIRE;

BEGIN 
	rdptr_g1p.aclr = (! rdaclr.q[]);
	rdptr_g1p.clock = rdclk;
	rdptr_g1p.cnt_en = rdcnt_addr_ena;
	wrptr_g1p.aclr = aclr;
	wrptr_g1p.clock = wrclk;
	wrptr_g1p.cnt_en = valid_wrreq;
	wrptr_gp.aclr = aclr;
	wrptr_gp.clock = wrclk;
	wrptr_gp.cnt_en = valid_wrreq;
	fifo_ram.aclr1 = aclr;
	fifo_ram.address_a[] = ram_address_a[];
	fifo_ram.address_b[] = ram_address_b[];
	fifo_ram.addressstall_b = (! rdcnt_addr_ena);
	fifo_ram.clock0 = wrclk;
	fifo_ram.clock1 = rdclk;
	fifo_ram.clocken1 = valid_rdreq;
	fifo_ram.data_a[] = data[];
	fifo_ram.wren_a = valid_wrreq;
	delayed_wrptr_g[].clk = wrclk;
	delayed_wrptr_g[].clrn = (! aclr);
	delayed_wrptr_g[].d = wrptr_gp.q[];
	p0addr.clk = rdclk;
	p0addr.clrn = rdaclr.q[];
	p0addr.d = B"1";
	rdptr_g[].clk = rdclk;
	rdptr_g[].clrn = (! aclr);
	rdptr_g[].d = rdptr_g1p.q[];
	rdptr_g[].ena = valid_rdreq;
	rs_dgwp_reg[].clk = rdclk;
	rs_dgwp_reg[].clrn = (! aclr);
	rs_dgwp_reg[].d = rs_dgwp.q[];
	ws_dgrp_reg[].clk = wrclk;
	ws_dgrp_reg[].clrn = (! aclr);
	ws_dgrp_reg[].d = ws_dgrp.q[];
	rdaclr.clock = (! rdclk);
	rdaclr.clrn = (! aclr);
	rdaclr.d[] = B"1";
	rs_dgwp.clock = rdclk;
	rs_dgwp.clrn = (! aclr);
	rs_dgwp.d[] = delayed_wrptr_g[].q;
	ws_dgrp.clock = wrclk;
	ws_dgrp.clrn = (! aclr);
	ws_dgrp.d[] = rdptr_g[].q;
	rdempty_eq_comp.dataa[] = rs_dgwp_reg[].q;
	rdempty_eq_comp.datab[] = rdptr_g[].q;
	wrfull_eq_comp.dataa[] = ws_dgrp_reg[].q;
	wrfull_eq_comp.datab[] = wrptr_gs[];
	q[] = fifo_ram.q_b[];
	ram_address_a[] = ( (wrptr_gp.q[10..10] $ wrptr_gp.q[9..9]), wrptr_gp.q[8..0]);
	ram_address_b[] = ( (rdptr_g1p.q[10..10] $ rdptr_g1p.q[9..9]), rdptr_g1p.q[8..0]);
	rdcnt_addr_ena = (valid_rdreq # (! p0addr.q));
	valid_rdreq = rdreq;
	valid_wrreq = wrreq;
	wrptr_gs[] = ( (! wrptr_gp.q[10..10]), (! wrptr_gp.q[9..9]), wrptr_gp.q[8..0]);
END;
--VALID FILE
